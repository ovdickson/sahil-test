name: Create ECR Resources

on:
 workflow_dispatch: 
 push:
    branches: [ migrate-to-aws ]

# concurrency to avoid terraform lock contention during ECR provisioning
concurrency: ci-${{ github.repository }}-docker-pipeline

env:
      ACCOUNT_ID: '060795911441'  
      ROLE_NAME: 'sahil-deployment-role'  
      REGION: 'eu-west-1'
      BACKEND_IAM_ROLE: 'workload-assumable-role'
      ECR_REPO_NAME: ${{ github.repository }}  # derived name, change as necessary
      ENV: ${{ github.ref == 'refs/heads/develop' && 'prod' || 'dev' }}

jobs:
  create-ecr:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
          role-session-name: github_action_session
          aws-region: ${{ env.REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Prepare ECR Repo Name
        run: |
          set -eux
          # lowercase the name
          repo="${GITHUB_REPOSITORY,,}"

          # replace / with _
          echo "ECR_REPO_NAME=${repo//\//_}" >> $GITHUB_ENV

      - name: Check if ECR Repository Exists
        id: check_ecr
        run: |
          if aws ecr describe-repositories --repository-names $ECR_REPO_NAME; then
            echo "Repository exists."
            echo "ECR_REPO_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Repository does not exist."
            echo "ECR_REPO_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Terraform Init
        run: |
          terraform init -upgrade -reconfigure \
            -input=false \
            -backend-config="key=docker-ecr/terraform-${{ env.ECR_REPO_NAME }}.tfstate" \
            -backend-config="role_arn=arn:aws:iam::${{env.ACCOUNT_ID}}:role/${{env.BACKEND_IAM_ROLE}}"
        working-directory: infra/terraform

      - name: Terraform Plan
        run: |
          terraform plan \
          -var 'repository_name=${{ env.ECR_REPO_NAME }}' \
          -var 'iam_role=arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}' \
          -var 'aws_account_id=${{ env.ACCOUNT_ID }}' \
          -out terraform.plan
        working-directory: infra/terraform

      - name: Check for Terraform Plan errors
        run: |
          if [[ -s terraform.plan ]]; then
            cat terraform.plan
            exit 1
          fi

      - name: Create ECR repo [TF apply]
        if: env.ECR_REPO_EXISTS == 'false' 
        run: |
          terraform apply \
            -var 'repository_name=${{ env.ECR_REPO_NAME }}' \
            -var 'iam_role=arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}' \
            -var 'aws_account_id=${{ env.ACCOUNT_ID }}' \
            -auto-approve
        working-directory: infra/terraform

# Job 2: Build and Push Docker Images (depends on Job 1)
  build-and-push:
    runs-on: ubuntu-latest
    needs: create-ecr  # Ensure this runs after ECR is created
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.ROLE_NAME }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ env.ACCOUNT_ID }}

      - name: Build and Push Docker Images
        id: build-publish
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
        run: |
          # Build and push the Website Image
          docker build -f ./infra/docker/Dockerfile.website . -t sahil-website-${{ env.ENV }}-latest
          docker tag sahil-website-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-website-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-website-${{ env.ENV }}-latest

          # Build and push the Agent Image
          docker build -f ./infra/docker/Dockerfile.agent . -t sahil-agent-${{ env.ENV }}-latest
          docker tag sahil-agent-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-agent-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-agent-${{ env.ENV }}-latest

          # Build and push the API Image
          docker build -f ./infra/docker/Dockerfile.api . -t sahil-api-${{ env.ENV }}-latest
          docker tag sahil-api-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-api-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-api-${{ env.ENV }}-latest

          # Build and push the Client Image
          docker build -f ./infra/docker/Dockerfile.client . -t sahil-client-${{ env.ENV }}-latest
          docker tag sahil-client-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-client-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-client-${{ env.ENV }}-latest

          # Build and push the Admin Image
          docker build -f ./infra/docker/Dockerfile.admin . -t sahil-admin-${{ env.ENV }}-latest
          docker tag sahil-admin-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-admin-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-admin-${{ env.ENV }}-latest

          # Build and push the Courier Image
          docker build -f ./infra/docker/Dockerfile.courier . -t sahil-courier-${{ env.ENV }}-latest
          docker tag sahil-courier-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-courier-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-courier-${{ env.ENV }}-latest

          # Build and push the Maps Image
          docker build -f ./infra/docker/Dockerfile.maps . -t sahil-maps-${{ env.ENV }}-latest
          docker tag sahil-maps-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-maps-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-maps-${{ env.ENV }}-latest

          # Build and push the Pay Image
          docker build -f ./infra/docker/Dockerfile.pay . -t sahil-pay-${{ env.ENV }}-latest
          docker tag sahil-pay-${{ env.ENV }}-latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-pay-${{ env.ENV }}-latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_NAME }}:sahil-pay-${{ env.ENV }}-latest

          
